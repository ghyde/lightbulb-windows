---
#- name: Sleep 3 minutes before attempting to install... sigh...
#  pause:
#    minutes: 3
#  when: dns_domain_name not in ansible_domain

- name: Install AD-Domain-Services
  win_feature:
    name: AD-Domain-Services
    state: present
    include_management_tools: True
    include_sub_features: True
  register: winfeature

- name: Reboot if needed
  win_reboot:
  when: winfeature.changed

#- name: Sleep 180 seconds to wait for DNS config
#  pause:
#    minutes: 3
#  when: winfeature.changed

#- name: Install AD-Certificate
#  win_feature:
#    name: AD-Certificate
#    state: present
#    include_management_tools: True
#    include_sub_features: True
#  register: wincertfeature

#- debug: var=wincertfeature

#- name: Reboot if needed
#  win_reboot:
#  when: wincertfeature.reboot_required

- name: Install DNS
  win_feature:
    name: DNS
    state: present
    include_management_tools: True
  register: windnsfeature

- name: Reboot if needed
  win_reboot:
  when: windnsfeature.reboot_required

#- name: Sleep 180 seconds to wait for DNS config
#  pause:
#    minutes: 3
#  when: windnsfeature.changed
#
#- name: Ensure AD services are started - will fail if install not complete
#  win_service:
#    name: "{{ item }}"
#    state: started
#    start_mode: auto
#  with_items:
#    - adws
#    - dns
#    - kdc
#    - netlogon

# Validate?
# DCDIAG
# Get-Service adws,kdc,netlogon,dns     # Services are running?
# Get-smbshare          # sysvol & netlogin shares
# get-eventlog "Directory Service" | select entrytype, source, eventid, message

# get-eventlog "Active Directory Web Services" | select entrytype, source, eventid, message

- name: Create DNS Domain
  win_domain:
    dns_domain_name: "{{ dns_domain_name }}"
    safe_mode_password: "{{ ansible_password }}"
  register: windomain

#- name: Sleep 1 minutes after reboot from DNS configuration
#  pause:
#    minutes: 1
#  when: windomain.reboot_required


# Every AMI I have tested has an issue, once you create the DNS Domain, all auth services stop.
# You can RDP in, but you can't WinRM.  So we just restart it through AWS itself
- name: If EC2, reboot the VM manually (ya it sucks)
  ec2:
    instance_tags:
        Name: "{{ name_prefix }}-windc"
    region: "{{ ec2_region }}"
    state: restarted
  when:
    - instance_loc == 'ec2'
    - windomain.reboot_required
  delegate_to: localhost

- name: If EC2, wait for it to come back up
  wait_for_connection:
    delay: 20
    timeout: 300
  when:
    - instance_loc == 'ec2'
    - windomain.reboot_required

- name: Reboot if needed
  win_reboot:
  when:
    - instance_loc != 'ec2'
    - windomain.reboot_required

- name: Ensure DNS services are started
  win_service:
    name: "{{ item }}"
    state: started
    start_mode: auto
  with_items:
    - dns

- name: Get current DNS zones
  win_shell: Get-DnsServerZone | Select ZoneName
  changed_when: false
  register: dnsserverzone

- name: Set Reverse Lookup Zone
  win_shell: Add-DnsServerPrimaryZone -NetworkId "{{ ptr_zone_cidr }}" -DynamicUpdate Secure -ReplicationScope Domain
  when: "ptr_zone_name not in dnsserverzone.stdout"

#
#- name: Promote to Domain Controller
#  win_domain_controller:
#    dns_domain_name: "{{ dns_domain_name }}"
#    domain_admin_user: "administrator@{{ dns_domain_name }}"
#    domain_admin_password: "{{ domain_admin_password }}"
#    safe_mode_password: "{{ domain_admin_password }}"
#    state: domain_controller
#    log_path: c:\ansible_win_domain_controller.txt
#  register: windc
#
#- name: Reboot if needed
#  win_reboot:
#  when: windc.reboot_required
#
#- name: Sleep 180 seconds before adding windows group... sigh...
#  pause:
#    minutes: 3
#  when: windc.changed
#
- name: Ensure AD services are started - will fail if install not complete
  win_service:
    name: "{{ item }}"
    state: started
    start_mode: auto
  with_items:
    - adws
    - dns
#    - kdc
#    - netlogon

- name: Create DNS A record for gitlab
  win_ad_dnsrecord:
    hostname: gitlab
    zone: "{{ dns_domain_name }}"
    ipaddr: "{{ hostvars['gitlab']['private_ip'] }}"
    state: present

- name: Create DNS A record for docs
  win_ad_dnsrecord:
    hostname: docs
    zone: "{{ dns_domain_name }}"
    ipaddr: "{{ hostvars['docs']['private_ip'] }}"
    state: present

- name: Create DNS A record for Towers
  win_ad_dnsrecord:
    hostname: s{{ item }}-tower
    zone: "{{ dns_domain_name }}"
    ipaddr: "{{ hostvars['s' + item + '-tower']['private_ip'] }}"
    state: present
  with_sequence: count={{ user_count }}

- name: Create DNS A record for Windows
  win_ad_dnsrecord:
    hostname: s{{ item }}-win1
    zone: "{{ dns_domain_name }}"
    ipaddr: "{{ hostvars['s' + item + '-win1']['private_ip'] }}"
    state: present
  with_sequence: count={{ user_count }}


#- name: Get PTR Records for zone
#  win_shell: Get-DnsServerResourceRecord -ZoneName {{ ptr_zone_name }} -RRType PTR | Format-Table -AutoSize -Wrap
#  register: ptr_records

#- debug: var=ptr_records
#
#- debug: msg="item = {{ item }}"
#  with_items: "{{ groups.all }}"

# Add-DnsServerResourceRecordPtr -Name "17" -ZoneName "1.168.192.in-addr.arpa" -AllowUpdateAny -TimeToLive 01:00:00 -AgeRecord -PtrDomainName "hostname.example.com"
#- name: Set PTR Record for each host
#  win_shell: Add-DnsServerResourceRecordPtr -Name "{{ hostvars[item]['ansible_host'].split('.')[3] }}" -ZoneName "{{ ptr_zone_name }}" -AllowUpdateAny -TimeToLive 01:00:00 -AgeRecord -PtrDomainName "{{ item + '.' + dns_domain_name}}"
#  when: "item not in ptr_records.stdout"
#  with_items: "{{groups.all}}"

- name: Add windows group
  win_domain_group:
    name: Ansible Users
    scope: global
    #path: OU=Users,DC=ansibleworkshop,DC=com

- name: Add windows domain admin
  win_domain_user:
    name: "Admin"
    upn: "Admin@{{ dns_domain_name }}"
    state: present
    enabled: yes
    account_locked: no
    groups:
      - Domain Admins
    password: "{{ domain_admin_password }}"
    update_password: on_create
    password_expired: false
    firstname: admin
    surname: user
    company: AnsibleByRedHat
    email: "Admin@{{ dns_domain_name }}"
    #path: ou=Users,dc=ansibleworkshop,dc=com

- name: Add windows AD users
  win_domain_user:
    name: "{{ user_prefix }}{{ item }}"
    upn: "{{ user_prefix}}{{ item }}@{{ dns_domain_name }}"
    state: present
    enabled: yes
    account_locked: no
    groups:
      - Ansible Users
    password: "{{ users_password }}"
    update_password: on_create
    password_expired: false
    firstname: "{{ user_prefix }}"
    surname: "{{ item }}"
    company: AnsibleByRedHat
    email: "{{user_prefix}}{{ item }}@{{ dns_domain_name }}"
  with_sequence: count="{{ user_count }}"

- name: Get current DNS search string
  win_shell: Get-DnsClientGlobalSetting | Select SuffixSearchList
  changed_when: false
  register: suffixsearchlist

- name: Set DNS search string
  win_shell: Set-DnsClientGlobalSetting -SuffixSearchList {{ dns_domain_name }}, ec2.internal
  when: "dns_domain_name not in suffixsearchlist.stdout"
